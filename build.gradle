import org.apache.commons.lang3.SystemUtils

apply plugin: 'application'
apply plugin: 'launch4j'
if (SystemUtils.IS_OS_MAC) { //plugin is broken on windows even if no task is executed
	apply plugin: 'macAppBundle'
}

mainClassName = 'com.mucommander.Launcher'

allprojects { project ->
    apply plugin: 'java'
	apply plugin: 'eclipse'
    group = 'org.mucommander'
    version = '0.9.0'
	
	sourceCompatibility = 1.7
	targetCompatibility = 1.7
	
	eclipse {
		if (project.name != 'mucommander-commons-file')  {//NfsURLConnection uses non public API which would trigger restricted access error with default eclipse errors/warnings settings
			classpath {
				file.whenMerged { classpath ->
					classpath.entries.removeAll { entry -> entry.kind == 'con' && entry.path =~ /^org.eclipse.jdt.launching.JRE_CONTAINER$/ }
				}
				containers 'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-' + project.sourceCompatibility
			}
		}
		jdt {
			sourceCompatibility = project.sourceCompatibility
			targetCompatibility = project.targetCompatibility
			file.withProperties { 
				it['org.eclipse.jdt.core.compiler.compliance'] = project.targetCompatibility.toString()
			}
		}
	}
}

repositories {
    jcenter()
    ivy {
        url = 'http://ivy.mucommander.com'
	layout "pattern", {
		ivy '[organisation]/[module]/[revision]/ivy.xml'
		artifact '[organisation]/[module]/[revision]/[artifact].[ext]'
	}
    }
}

dependencies {
    compile project('mucommander-commons-file')
    compile project('mucommander-commons-conf')
    compile project('mucommander-commons-collections')
    compile project('mucommander-commons-util')
    compile project('mucommander-commons-io')
    compile project('mucommander-commons-runtime')
    compile group: 'org.openjdk', name: 'java-extension', version: '6.0', configuration: 'runtime'

    compile 'jmdns:jmdns:3.1'
    compile 'org.slf4j:slf4j-api:1.7.7'
    compile 'ch.qos.logback:logback-core:1.1.2'
    compile 'ch.qos.logback:logback-classic:1.1.2'
    compile 'com.jidesoft:jide-oss:3.6.4'

    testCompile 'org.testng:testng:6.8.8'
    testCompile 'junit:junit:4.11'
}

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath( 
			'edu.sc.seis.gradle:macappbundle:2.0.0', 
			'edu.sc.seis.gradle:launch4j:1.0.6',
			'org.apache.commons:commons-lang3:3.3.2'
		)
    }
}

launch4j {
    mainClassName = project.mainClassName
    icon = new File(project.projectDir, 'package/windows/mucommander.ico')
    jar = project.tasks[JavaPlugin.JAR_TASK_NAME].archivePath
}
if (SystemUtils.IS_OS_MAC) {
	macAppBundle {
		mainClassName = project.mainClassName
		icon = new File(project.projectDir, '/package/osx/icon.icns')
		bundleJRE = true
		javaProperties.put("apple.laf.useScreenMenuBar", "true")
		bundleExtras.put("NSHighResolutionCapable", "true")
	}
}
